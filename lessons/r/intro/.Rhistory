git status
ls
swiss
babies
mtcars
CO2
knitr::opts_chunk$set(echo = TRUE)
library(Hmisc)
babies
library(tidyverse)
2+2
2+2==4
a<-4
a<-4
#this is a comment, this will not run as code.
#Assign the value of 4 to variable "a"
a<-4
#Ask r if 2+2 is equal to "a"
2+2==a
#this is a comment, this will not run as code.
#Assign the value of 4 to variable "a"
a<-4
#Ask r if 2+2 is equal to "a"
2+2==a
#this is a comment, this will not run as code.
#Assign the value of 4 to variable "a"
a<-4
#return the value of a
print(a)
#Ask r if 2+2 is equal to "a"
2+2==a
#this is a comment, this will not run as code.
#Assign the value of 4 to variable "a"
a<-4
a<-4
print(a)
#Ask r if 2+2 is equal to "a"
2+2==a
#this is a comment, this will not run as code.
#Assign the value of 4 to variable "a"
a<-4
#return the value of a
print(a)
#Ask r if 2+2 is equal to "a"
2+2==a
babies
library(UsingR)
library(UsingR)
babies
babies
babies
write.csv(babies, file = "babies.csv")
read.csv("babies.csv")
babies
#for practice we will use the load babies dataset that is already loaded in R
#call the babies dataset
babies
#we still need to store this dataset in our R environment
df <- babies
df
df
#for practice we will use the load babies dataset that is already loaded in R
#call the babies dataset
babies
#we still need to store this dataset in our R environment
df <- babies
#now if we call df, we can see we have the babies dataset
df
#now lets use the function write.csv to take that data and save it as a .csv file in our current directory
write.csv(babies, "babies.csv")
df
read_csv("babies.csv")
babies<- read_csv("babies.csv")
babies<- read_csv("babies.csv", row_names = TRUE)
babies <- read.csv("~/studyGroup/lessons/r/intro/babies.csv", header=FALSE, row.names=1)
View(babies)
#Load in the tidyverse and Using Rlibrary
library(tidyverse)
library(UsingR)
#call the babies dataset
babies
#we still need to store this dataset in our R environment
df <- babies
#Load in the tidyverse and Using Rlibrary
library(tidyverse)
library(UsingR)
#call the babies dataset
babies
#we still need to store this dataset in our R environment
df <- babies
#viewing df
df
write.csv(babies, "babies.csv")
babies
library(readr)
babies2 <- read_csv("babies.csv")
View(babies)
babies2
babies2
rownames(babies2) <-babies2$X1
#copy the code generated by the import dataset button
library(readr)
babies2 <- read_csv("babies.csv")
View(babies)
head(df)
head(df, n=10)
#use the str() function on df
str(df)
#use the dim() function to return the size of df
dim(df)
#use the str() function on df
str(df)
#use the dim() function to return the size of df
dim(df)
#use names() to return the column names
names(df)
#use rownames() to return a vector of the rownames
rownames(df)
rownames(df)
row.names(df)
names(df)
#viewing df
view(df)
#give a summary of df
summary(df)
df$sex
df[,6]
df$sex
df[1:10,7]
df[,7]
df$weight
hist(df$wt)
plot(data=df, x=ht, y=wt)
plot(x=df$ht, y=df$wt)
?plot
plot(x=df$ht, y=df$wt, type = "l")
plot(x=df$ht, y=df$wt, type = "b")
plot(x=df$ht, y=df$wt, type = "c")
#Lets try to make a line graph
plot(x=df$ht, y=df$wt, type = "h")
plot(x=df$ht, y=df$wt, type = "p")
plot(x=df$ht, y=df$wt, type = "p")
#Try plotting wt as a histogram
hist(df$wt)
#try plotting ht as the x variable and wt as the y variable
plot(x=df$ht, y=df$wt)
#Now lets use the help function ? to view the plot function
?plot
#Lets try changing the type argument
plot(x=df$ht, y=df$wt, type = "l")
summary(babies)
as.logical(df$sex)
as.factor(df$sex)
as.logical(df$sex)
df$sex
as.factor(df$sex)
factor(df$sex, levels = c("1", "0"))
df$sex
fd$sex <- factor(df$sex, levels = c("1", "0"))
df$sex <- factor(df$sex, levels = c("1", "0"))
#Load in the tidyverse and Using Rlibrary
library(tidyverse)
library(UsingR)
#call the babies dataset
babies
#we still need to store this dataset in our R environment
df <- babies
as.factor(df$sex)
factor(df$sex, levels = c("1", "2", "9"))
df$sex <- factor(df$sex, levels = c("1", "2", "9"))
summary(babies)
summary(df)
#recall:
hist(df$wt)
hist(df$wt)
df[wt==999]
df
df[,wt==999]
subset(df, wt == 999)
subset(df, wt == "999")
df$wt
filter(df, wt == "999")
filter(df, wt == 999)
summary(df)
df[ht == 99]
df[df$ht == 99]
df[,df$ht == 99]
df$ht == 99
df$ht == 99
ifelse(df$ht == 99, NA, df$ht)
#Use the ifelse() function to tell R to replace df$ht values that are 99 with NA.
ifelse(df$ht == 99, NA, df$ht)
#Store the new variable back into df$ht
df$ht <- ifelse(df$ht == 99, NA, df$ht)
count(is.na(df$ht))
summary(is.na(df$ht))
summary(is.na(df$ht)==TRUE)
na.omit(df)
df
na.omit(df)
df[!is.na(df)]
!is.na(df)
df[!is.na(df)]
na.omit(df)
df2 <- na.omit(df)
df2
#recall:
hist(df$ht)
plot(df$wt, df$ht)
- **Authors**: Luke W. Johnston
- **Research field**: Nutritional Sciences (epidemiology)
- **Lesson topic**: Intro to R and data wrangling
- **Lesson content URL**: <https://github.com/UofTCoders/studyGroup/tree/gh-pages/lessons/r/intro>
- **Lesson video stream**: <https://www.youtube.com/watch?v=pbG_3ZuNyx8>
- **Authors**: Luke W. Johnston
- **Research field**: Nutritional Sciences (epidemiology)
- **Lesson topic**: Intro to R and data wrangling
- **Lesson content URL**: <https://github.com/UofTCoders/studyGroup/tree/gh-pages/lessons/r/intro>
- **Lesson video stream**: <https://www.youtube.com/watch?v=pbG_3ZuNyx8>
- **Authors**: Luke W. Johnston
- **Research field**: Nutritional Sciences (epidemiology)
- **Lesson topic**: Intro to R and data wrangling
- **Lesson content URL**: <https://github.com/UofTCoders/studyGroup/tree/gh-pages/lessons/r/intro>
- **Lesson video stream**: <https://www.youtube.com/watch?v=pbG_3ZuNyx8>
df
select(df,id:date)
library(dplyr)
select(df,id,pluralty,outcome,date)
select(df,id:date)
knitr::opts_chunk$set(echo = TRUE)
df %>% rename(wt = weight)
df %>% rename(weight = wt)
df %>% select(weight = wt)
df %>% rename(weight = wt)
df %>% select(weight = wt)
filter(df,wt==100)
ds %>% filter(wt>100)
df
df %>% filter(sex==1)
df %>% filter(sex=="1")
df %>% filter(marital==1)
#filter for marital status does not equal 1
df %>% filter(marital!=1)
df %>% filter(wt>100 & marital!=1)
df %>% filter(wt>100 , marital!=1)
df %>% filter(wt>100)  %>% filter(marital!=1)
ds %>%
filter(Treatment=="chilled") %>%
select(Plant, conc, uptake) %>%
mutate(hwratio = wt/ht)
df %>%
filter(wt>100) %>%
mutate(hwratio = wt/ht) %>%
select(-ht, -wt)
df %>%
filter(wt>100) %>%
mutate(hwratio = wt/ht) %>%
select(-ht, -wt) %>%
arrange(id, age)
df
df %>%
gather(ht,wt)
library(tidyr)
library(tidyverse)
df %>%
gather(ht,wt)
df %>%
gather(ht,wt, "variable", value = "grams")
df %>%
gather(ht,wt, key ="variable", value = "grams")
ds %>%
spread(ht,wt)
df %>%
spread(ht,wt)
df %>%
gather(ht,wt, key ="variable", value = "grams") %>%
spread(ht,wt)
## And back again:
df %>%
gather(ht,wt, key ="variable", value = "grams") %>%
spread(variable, grams)
df
df %>%
group_by(smoker) %>%
summarise(mean = mean(wt))
df %>%
group_by(smoker)
df
df %>%
group_by(smoke) %>%
summarise(mean = mean(wt))
## into html
library(rmarkdown)
render('TeachCopy_Oct13.Rmd') ## or can use rmarkdown::render('main.Rmd')
library(rmarkdown)
render('TeachCopy_Oct13.Rmd') ## or can use rmarkdown::render('main.Rmd')
## into html
library(rmarkdown)
render('TeachCopy_Oct13.Rmd') ## or can use rmarkdown::render('main.Rmd')
df
select(df,id,pluralty,outcome,date)
df,id,pluralty,outcome,date
df
select(df,id:date)
df
select(df, id,pluralty,outcome,date)
select(df, c(id,pluralty,outcome,date))
select(iris, Sepal.Length, Sepal.Width)
iris
select(iris, Sepal.Length, Sepal.Width)
select(iris, Sepal.Length, Sepal.Width)
select(iris, -Sepal.Length)
library(dplyr)
#The first two  lines of code are the same.
select(df,id,pluralty,outcome,date)
df
select(df,"id","pluralty","outcome","date")
select(df, id:date)
select(df,id,pluralty,outcome,date)
df %>%
df %>%
select(id,pluralty,outcome,date)
df
df %>%
select(id,pluralty,outcome,date)
df %>%
select(id:date)
#This line of code selects all columns except ht and wt.
df %>%
select(-ht, -wt)
#The outputs of each of these two lines of code are the same.
df %>%
select(id,pluralty,outcome,date)
knitr::opts_chunk$set(echo = TRUE)
#this is a comment, this will not run as code.
#Assign the value of 4 to variable "a"
a<-4
#return the value of a
print(a)
#Ask r if 2+2 is equal to "a"
2+2==a
#Load in the tidyverse, Using R, and dplyr libraries
library(tidyverse)
library(UsingR)
#call the babies dataset
babies
#we still need to store this dataset in our R environment
df <- babies
#viewing df
view(df)
#OR
df
write.csv(babies, "babies.csv")
#copy the code generated by the import dataset button
library(readr)
babies2 <- read_csv("babies.csv")
View(babies)
#view the whole dataset
view(df)
#use the head function to view the first 6 rows of the data
head(df)
#Look at the first 10 rows of the data
head(df, n=10)
#use the str() function on df
str(df)
#use the dim() function to return the size of df
dim(df)
#use names() to return the column names
names(df)
#use row.names() or rownames() to return a vector of the rownames
row.names(df)
#give a summary of df
summary(df)
#Try calling the wt column using the `$`
df$wt
#Try another way to get the wt column
df[,7]
#Try to get the first ten rows of the weight column
df[1:10,7]
#Try plotting wt as a histogram
hist(df$wt)
#try plotting ht as the x variable and wt as the y variable
plot(x=df$ht, y=df$wt)
#Now lets use the help function ? to view the plot function
?plot
#Lets try changing the type argument
plot(x=df$ht, y=df$wt, type = "l")
#lets take a look at the summary again
summary(df)
#let's look at what the coding should be for the variables in babies by looking at the data key
?babies
#Sex is a factor with 3 levels, 1,2,9
as.factor(df$sex)
#only one level is showing, let's use factor() to and set levels = c("1","0")
factor(df$sex, levels = c("1", "2", "9"))
#now we have to save our new variable
df$sex <- factor(df$sex, levels = c("1", "2", "9"))
plot(df$wt, df$ht)
#Use the ifelse() function to tell R to replace df$ht values that are 99 with NA.
ifelse(df$ht == 99, NA, df$ht)
#Store the new variable back into df$ht
df$ht <- ifelse(df$ht == 99, NA, df$ht)
#To count the number of NAs
summary(is.na(df$ht))
#To remove the rows that have NA in them from the dataset, we can use the na.omit() function
na.omit(df)
#Let's store the  df with NAs omited into a new data frame, name it df2
df2 <- na.omit(df)
library(dplyr)
#The first two  lines of code are the same.
select(df,id,pluralty,outcome,date)
dplyr::select(df,-ht, -wt)
#The outputs of each of these two lines of code are the same.
df %>%
dplyr::select(id,pluralty,outcome,date)
df %>%
dplyr::select(id:date)
#This line of code selects all columns except ht and wt.
df %>%
dplyr::select(-ht, -wt)
## into html
library(rmarkdown)
render('TeachCopy_Oct13.Rmd') ## or can use rmarkdown::render('main.Rmd')
## into html
library(rmarkdown)
render('TeachCopy_Oct13.Rmd') ## or can use rmarkdown::render('main.Rmd')
render('TeachCopy_Oct13.Rmd') ## or can use rmarkdown::render('main.Rmd')
render('TeachCopy_Oct13.Rmd') ## or can use rmarkdown::render('main.Rmd')
dplyr::select(df, id:date)
dplyr::select(df,id,pluralty,outcome,date)
dplyr::select(df,-ht, -wt)
df %>%
filter(wt>100) %>%
mutate(hwratio = wt/ht) %>%
dplyr::select(-ht, -wt)
df %>%
filter(wt>100) %>%
mutate(hwratio = wt/ht) %>%
dplyr::select(-ht, -wt)
knit('TeachCopy_Oct1.Rmd') ## or can use knitr::knit('main.Rmd')
library(knitr)
knit('TeachCopy_Oct1.Rmd')
library(knitr)
knit('TeachCopy_Oct1.Rmd')
